#!/usr/bin/php
<?php
/******************************************************************************
//  Mit diesem Script wird der richtige USB Port initialisiert.
//  Bitte nur Änderungen vornehmen, wenn man sich auskennt.
//  Version 16.8.2018
******************************************************************************/
//  require("/var/www/html/user.config.php");
//  require("/var/www/html/phpinc/funktionen.inc.php");
$Tracelevel = 8; //  1 bis 10  10 = Debug

//  $funktionen = new funktionen();

$host = "solaranzeige.de";
$port = 9853;
$username = "solar";
$password = "kk37.-55H";
$Dir = "/Multi/";
$remoteDir = $Dir;
$localDir = "/var/www/html/phpinc/";


echo "\n\nAchtung! Bei einem Update können alle Dateien für die Solaranzeige ausgetauscht\n";
echo "werden, bis auf die Dateien 'user.config.php' und 'meldungen_senden.php'.\n";
echo "Haben Sie Änderungen an den Dateien selber vorgenommen, dann bitte \n";
echo "jetzt den Update Prozess abbrechen und die geänderten Dateien sichern.\n";
echo "\n";

echo "[W]eiter    [A]bbruch\n\n";
$line = trim(fgets(STDIN));

if (strtoupper(substr($line,0,1)) <> "W")  {
  echo "\nUpdate abgebrochen.";
  echo "\n\n";
  exit;
}

echo "\nSind Sie sicher? Ein zurück gibt es nicht mehr.\n";
echo "\n";

echo "[W]eiter    [A]bbruch\n\n";
$line = trim(fgets(STDIN));

if (strtoupper(substr($line,0,1)) <> "W")  {
  echo "\nUpdate abgebrochen.";
  echo "\n\n";
  exit;
}

echo "\nUpdate wird gestartet .....";
echo "\n\n";

log_schreiben(" ","   ",6);
log_schreiben("Update wird durchgeführt.","   ",6);
if (!function_exists("ssh2_connect")) {
    log_schreiben("Funktion ssh2_connect nicht vorhanden.","   ",6);
    exit;
}
elseif (!$connection = ssh2_connect($host, $port))  {
    log_schreiben("Server: ".$host." Port: ".$port." nicht erreichbar.","   ",6);
    exit;
}
elseif (!ssh2_auth_password($connection, $username, $password)) {
    log_schreiben("UserID oder Password falsch.","   ",6);
    exit;
}

if (!$stream = ssh2_sftp($connection)) {
    log_schreiben("Kann Stream nicht aufbauen.","   ",6);
    exit;
}

if (!$dir = opendir("ssh2.sftp://".$stream.$remoteDir))  {
    log_schreiben("Entferntes Verzeichnis nicht vorhanden.","   ",6);
    exit;
}

// Zuerst die INC Datei.
//
$remoteDir = $Dir."phpinc/";
$localDir = "/var/www/html/phpinc/";

$remote = @fopen("ssh2.sftp://".$stream.$remoteDir."funktionen.inc.php", 'r');
if ($remote) {
  $local = @fopen($localDir."funktionen.inc.php", 'w');
  $read = 0;
  $filesize = filesize("ssh2.sftp://".$stream.$remoteDir."funktionen.inc.php");

  while ($read < $filesize && ($buffer = fread($remote, $filesize - $read)))  {
    $read += strlen($buffer);
    if (fwrite($local, $buffer) === FALSE)  {
      log_schreiben("Fehler beim Schreiben in die Datei phpinc/funktionen.inc.php","X  ",6);
      break;
    } 
  }
  log_schreiben("Datei  /phpinc/funktionen.inc.php  wird kopiert.","o->",6);
}
else {
  log_schreiben("Datei  /phpinc/funktionen.inc.php  wurde nicht gefunden.","o->",6);
}
fclose($local);
fclose($remote);


// motd Datei.
//
$remoteDir = $Dir."motd/";
$localDir = "/etc/";

$remote = @fopen("ssh2.sftp://".$stream.$remoteDir."motd", 'r');
if ($remote) {
  $local = @fopen($localDir."motd", 'a');
  $read = 0;
  $filesize = filesize("ssh2.sftp://".$stream.$remoteDir."motd");

  while ($read < $filesize && ($buffer = fread($remote, $filesize - $read)))  {
    $read += strlen($buffer);
    if (fwrite($local, $buffer) === FALSE)  {
      log_schreiben("Fehler beim Schreiben in die Datei etc/motd","X  ",6);
      break;
    }
  }
  log_schreiben("Datei  /etc/motd  wird kopiert.","o->",6);
}
else {
  log_schreiben("Datei  ".$remoteDir."motd  nicht vorhanden.","o->",6);
}
fclose($local);
fclose($remote);

//  Jetzt alle Dateien im Verzeichnis "master".$Dir
//
$remoteDir = $Dir;
$localDir = "/var/www/html/";

$files = array();
while (false !== ($file = readdir($dir)))
{
    if ($file == "." || $file == ".." || $file == "phpinc" || $file == "motd")
        continue;
    $files[] = $file;
}

foreach ($files as $file) {

    log_schreiben("Datei ".$file." wird kopiert.","o->",6);
    if (!$remote = @fopen("ssh2.sftp://".$stream.$remoteDir.$file, 'r'))
    {
    log_schreiben("Entfernte Datei ".$file." nicht vorhanden oder kann nicht kopiert werden.","X  ",6);
        continue;
    }

    if (!$local = @fopen($localDir . $file, 'w'))
    {
    log_schreiben("Datei ".$file." kann nicht in das lokale Verzeichnis geschrieben werden.","X  ",6);
        continue;
    }

    $read = 0;
    $filesize = filesize("ssh2.sftp://".$stream.$remoteDir.$file);

    while ($read < $filesize && ($buffer = fread($remote, $filesize - $read)))
    {
        $read += strlen($buffer);
        if (fwrite($local, $buffer) === FALSE)
        {
          log_schreiben("Fehler beim Schreiben in die Datei ".$file,"X  ",6);
          break;
        }
    }

    fclose($local);
    fclose($remote);
}
closedir($dir);

log_schreiben("---------------------------------------------------","   ",6);  

echo "\nSolaranzeige Update ist beendet. Normalerweise ist kein 'reboot'  nötig,\n";
echo "außer das Problem lag in der Verbindung zum Regler / Wechselrichter.\n";
echo "In diesem Fall muss der Docker neu gestartet werden.\n";
echo "Dieser Update war nicht für das Betriebssystem, InfuxDB und auch nicht für Grafana.\n\n";

exit;


/**************************************************************************
//  Log Eintrag in die Logdatei schreiben
//  $LogMeldung = Die Meldung ISO Format
//  $Loglevel=5   Loglevel 1-10   10 = Trace
**************************************************************************/

function log_schreiben($LogMeldung,$Titel="   ",$Loglevel=5,$UTF8=0){
    Global $Tracelevel;
    $LogDateiName = "/var/www/log/update.log";
    if ($Loglevel <= $Tracelevel) {

      if($UTF8) {
         $LogMeldung = utf8_encode($LogMeldung);
      }

      if ($handle = fopen($LogDateiName, 'a')) {
        //  Schreibe in die geöffnete Datei.
        //  Bei einem Fehler bis zu 3 mal versuchen.
        for ($i=1;$i<4;$i++) {
          $rc = fwrite($handle,date("d.m. H:i:s")." ".substr($Titel,0,3)." ".$LogMeldung."\n");
          if ($rc) {
            break;
          }
          sleep(1);
        }

        fclose($handle);
      }
    }
}
?>

